


export class CancellationToken {
  static MAX_NUMBER_OF_WORKERS = 128;

  private static booked: boolean[] = new Array<boolean>(this.MAX_NUMBER_OF_WORKERS);
  private static shared: ArrayBuffer = crossOriginIsolated? new SharedArrayBuffer(Int32Array.BYTES_PER_ELEMENT * this.MAX_NUMBER_OF_WORKERS): new ArrayBuffer(0);
  private static array: Int32Array = new Int32Array(this.shared);

  private tokenIndex: number;

  private constructor(offset: number) {
    this.tokenIndex = offset;
  }

  public static register(): CancellationToken {
    const index = this.booked.findIndex(item => !item);
    if(index === -1 && CancellationToken.array instanceof SharedArrayBuffer) {
      throw new Error('Number of cancellation tokens exceeded the admissible limit');
    } else if(CancellationToken.withinArray(index)) {
      this.booked[index] = true;
      Atomics.store(CancellationToken.array, index, 0);
    }
    return new CancellationToken(index);
  }

  public release() {
    if (CancellationToken.withinArray(this.tokenIndex)) {
      CancellationToken.booked[this.tokenIndex] = false;
    }
  }

  public cancel(): void {
    if (CancellationToken.withinArray(this.tokenIndex)) {
      Atomics.store(CancellationToken.array, this.tokenIndex, 1);
    }
  }

  public reset(): void {
    if (CancellationToken.withinArray(this.tokenIndex)) {
      Atomics.store(CancellationToken.array, this.tokenIndex, 0);
    }
  }

  public get cancelled(): boolean {
    return CancellationToken.withinArray(this.tokenIndex) && Atomics.load(CancellationToken.array, this.tokenIndex) === 1;
  }

  public get index(): number {
    return this.tokenIndex
  }

  public static get buffer(): ArrayBuffer {
    return CancellationToken.shared;
  }

  private static withinArray(index: number): boolean {
    return index > -1 && CancellationToken.array.byteLength / Int32Array.BYTES_PER_ELEMENT > index;
  }
}

export interface WorkerHelpers {
  cancelled: Function;
  next: Function;
  progress: Function;
  done: Function;
  error: Function;
}

export type WorkerResult = any;

export type WorkerMethod = (data: any, helpers: WorkerHelpers | any) => WorkerResult | Promise<WorkerResult>;

export class InlineWorker {
  private cancellationToken: CancellationToken | null;
  private workerbody: string;
  private worker: Worker | null;
  private onprogress: ((data: number) => void);
  private onnext: ((data: any) => void);
  private injected: string[];
  private promise: Promise<any> | null;
  private resolve: (args: any) => void;
  private reject: (args: any) => void;

  constructor(task: WorkerMethod) {

    if (!isWorkerSupported()) {
      throw new Error('Web Worker is not supported');
    }

    let funcbody = task.toString()

    if(isWebpackBundlerPresent()) {
      // get rid of indirect function calls generated by WEBPACK
      funcbody = funcbody.replace(/\((?:.*,)(?:.*WEBPACK_IMPORTED_MODULE.*\.)(.*)\)(\(.*\))/g, "$1$2");
    }

    this.workerbody = `function __worker_cancelled__(){return __worker_tokenIndex__>-1&&1===Atomics.load(__worker_cancellationBuffer__,__worker_tokenIndex__)}function __worker_next__(e){self.postMessage({type:"next",value:e})}function __worker_progress__(e){self.postMessage({type:"progress",value:e})}self.onmessage=function(e){__worker_cancellationBuffer__=new Int32Array(e.data.cancellationBuffer),__worker_tokenIndex__=e.data.tokenIndex,new Promise((r,n)=>{let o=!1,t=!1,a=e=>{o=!0,r(e)},s=e=>{t=!0,n(e)};__worker_data__=e.data.data,__worker_helpers__={cancelled:__worker_cancelled__,next:__worker_next__,progress:__worker_progress__,done:a,error:s};let c=(${funcbody})(__worker_data__,__worker_helpers__);if(c instanceof Promise)return c.then(r,n);if(!o&&!t&&void 0!==c)return r(c),c;if(__worker_cancelled__()){r(void 0);return}}).then(e=>{__worker_cancelled__()?self.postMessage({type:"cancelled",value:void 0}):self.postMessage({type:"done",value:e})}).catch(e=>self.postMessage({type:"error",error:e}))};`
    this.cancellationToken = this.promise = null; this.resolve = () => {}; this.reject = () => {};
    this.worker = null; this.injected  = []; this.onprogress = this.onnext = () => {};
  }

  static terminate(workers: InlineWorker[]): void {
    workers.forEach(worker => worker.worker?.terminate());
  }

  cancel(): void {
    if(this.running()) {
      this.cancellationToken?.cancel();
    }
  }

  terminate(): void {
    if(this.running()) {
      this.worker?.terminate();
      this.promise = null;
      this.resolve(undefined);
      this.cancellationToken?.release();
    }
  }

  run(data?: any, transferList?: Transferable[]): Promise<any> {
    if(!this.promise) {
      this.cancellationToken = CancellationToken.register();
      let blob = new Blob([this.workerbody].concat(this.injected), { type: 'application/javascript' });
      this.worker = new Worker(URL.createObjectURL(blob));
      this.worker.postMessage({ data: data, cancellationBuffer: CancellationToken.buffer, tokenIndex: this.cancellationToken.index}, transferList as any);
      this.promise = new Promise((resolve, reject) => {
        this.resolve = resolve; this.reject = reject;
        this.worker!.onmessage = (e: MessageEvent) => {
          if (e.data?.type === 'done') { this.promise = null; resolve(e.data.value); this.cancellationToken?.release(); }
          else if (e.data?.type === 'progress') { this.onprogress && this.onprogress(e.data.value); }
          else if (e.data?.type === 'next') { this.onnext && this.onnext(e.data.value); }
          else if (e.data?.type === 'cancelled') { this.promise = null; resolve(undefined); this.cancellationToken?.release(); }
          else if (e.data?.type === 'error') { this.promise = null; reject(e.data.error); this.cancellationToken?.release(); }
        }
      });
    }

    return this.promise;
  }

  running() {
    return !!this.promise;
  }

  progress(fn: (data: any) => void): InlineWorker {
    this.onprogress = fn;
    return this;
  }

  subscribe(fn: (data: any) => void): InlineWorker {
    this.onnext = fn;
    return this;
  }

  inject(...args: Function[]): InlineWorker {
    this.injected = this.injected ?? []
    for (let i = 0; i < args.length; i++) {
      let fn: Function = args[i];
      if (typeof fn === 'function') {
        let fnBody = fn.toString();
        // check if function is anonymous and name it
        fnBody = fnBody.replace(/function[\s]*\(/, `function ${fn.name}(`);

        if(this.injected.indexOf(fnBody) === -1) {
          this.injected.push(fnBody);
        }
      }
    }
    return this;
  }
}


export function isWorkerSupported(): boolean {
  return !!Worker;
}

export function isWebpackBundlerPresent(): boolean {
  return !!(window as any)["webpackChunkapp2"]
}

export function isCancellationSupported(): boolean {
  return crossOriginIsolated;
}


if(!isCancellationSupported()) {
  console.warn("CancellationToken is not supported in this environment. Please add following two headers to the top level document: 'Cross-Origin-Embedder-Policy': 'require-corp'; 'Cross-Origin-Opener-Policy': 'same-origin';");
}
